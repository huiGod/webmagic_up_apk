package com.uq.util;

import java.io.ByteArrayOutputStream;

/**  
 * Base64编码/解码器。  
 * @author Sol  
 */  
public class BASE64{   
    private final static char[] BASE64_ENCODING_TABLE;   
    private final static byte[] BASE64_DECODING_TABLE;   
  
    static    
    {   
        BASE64_ENCODING_TABLE="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".toCharArray();   
        BASE64_DECODING_TABLE=new byte[]   
        {   
            -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   
            -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-1,-1,-1,   
            -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,   
            -1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1  
        };   
    }   
       
    private BASE64()   
    {    
    }   
       
    /**  
     * 将数据进行Base64编码。  
     * @param data 数据  
     * @param offset 数据中的初始偏移量  
     * @param length 写入的字节数  
     * @return 编码后的字符串  
     */  
    public final static String encode(byte[] data,int offset,int length)   
    {   
        if(data==null)   
        {   
            return null;   
        }   
           
        StringBuffer buffer=new StringBuffer();   
        int[] temp=new int[3];   
        int end=offset+length;   
           
        while(offset<end)   
        {               
            temp[0]=data[offset++]&255;   
               
            if(offset==data.length)   
            {   
                buffer.append(BASE64_ENCODING_TABLE[(temp[0]>>>2)&63]);   
                buffer.append(BASE64_ENCODING_TABLE[(temp[0]<<4)&63]);   
                buffer.append('=');   
                buffer.append('=');   
                   
                break;   
            }   
               
            temp[1]=data[offset++]&255;   
               
            if(offset==data.length)   
            {   
                buffer.append(BASE64_ENCODING_TABLE[(temp[0]>>>2)&63]);   
                buffer.append(BASE64_ENCODING_TABLE[((temp[0]<<4)|(temp[1]>>>4))&63]);   
                buffer.append(BASE64_ENCODING_TABLE[(temp[1]<<2)&63]);   
                buffer.append('=');   
                   
                break;   
            }   
               
            temp[2]=data[offset++]&255;   
               
            buffer.append(BASE64_ENCODING_TABLE[(temp[0]>>>2)&63]);   
            buffer.append(BASE64_ENCODING_TABLE[((temp[0]<<4)|(temp[1]>>>4))&63]);   
            buffer.append(BASE64_ENCODING_TABLE[((temp[1]<<2)|(temp[2]>>>6))&63]);   
            buffer.append(BASE64_ENCODING_TABLE[temp[2]&63]);   
        }   
           
        return buffer.toString();   
    }   
       
    /**  
     * 将数据进行Base64编码。  
     * @param data 数据  
     * @return 编码后的字符串  
     */  
    public final static String encode(byte[] data)   
    {   
        return encode(data,0,data.length);   
    }   
  
    /**  
     * 将字符串进行Base64编码。  
     * @param str 字符串  
     * @return 编码后的字符串  
     */  
    public final static String encode(String str)   
    {   
        return encode(str.getBytes());   
    }   
       
    /**  
     * 对使用Base64编码的字符串进行解码。  
     * @param str 经过编码的字符串  
     * @return 解码后的数据  
     */  
    public final static byte[] decode(String str)   
    {   
        if(str==null)   
        {   
            return null;   
        }   
  
        ByteArrayOutputStream buffer=new ByteArrayOutputStream();   
        byte[] data=str.getBytes();   
        int[] temp=new int[4];   
        int index=0;   
           
        while(index<data.length)   
        {   
            do  
            {   
                temp[0]=BASE64_DECODING_TABLE[data[index++]];   
            }while(index<data.length&&temp[0]==-1);   
               
            if(temp[0]==-1)   
            {   
                break;   
            }   
  
            do  
            {   
                temp[1]=BASE64_DECODING_TABLE[data[index++]];   
            }while(index<data.length&&temp[1]==-1);   
               
            if(temp[1]==-1)   
            {   
                break;   
            }   
               
            buffer.write(((temp[0]<<2)&255)|((temp[1]>>>4)&255));   
  
            do  
            {   
                temp[2]=data[index++];   
                   
                if(temp[2]==61)   
                {   
                    return buffer.toByteArray();   
                }   
                   
                temp[2]=BASE64_DECODING_TABLE[temp[2]];   
            }while(index<data.length&&temp[2]==-1);   
               
            if(temp[2]==-1)   
            {   
                break;   
            }   
               
            buffer.write(((temp[1]<<4)&255)|((temp[2]>>>2)&255));   
  
            do  
            {   
                temp[3]=data[index++];   
                   
                if(temp[3]==61)   
                {   
                    return buffer.toByteArray();   
                }   
                   
                temp[3]=BASE64_DECODING_TABLE[temp[3]];   
            }while(index<data.length&&temp[3]==-1);   
               
            if(temp[3]==-1)   
            {   
                break;   
            }   
               
            buffer.write(((temp[2]<<6)&255)|temp[3]);   
        }   
           
        return buffer.toByteArray();   
    }  
    
    /**
     * 返回十六进制字符串
     * @param str
     * @return
     */
    public static String decodeToHex(String str){
    	String reText = "", sTemp = "";
    	byte[] b = BASE64.decode(str);
    	for(int i=0;i<b.length;i++){
			 sTemp = Integer.toHexString(0xFF & b[i]);
			 if(sTemp.length() < 2){
				 reText += "0";
			 }
			 reText += sTemp.toUpperCase();
		 }
    	return reText;
    }
    
    /** 把16进制字符串转换成字节数组
     * @param hex
     * @return
     */
    public static byte[] hexStringToByte(String hex) {
	    int len = (hex.length() / 2);
	    byte[] result = new byte[len];
	    char[] achar = hex.toCharArray();
	    for (int i = 0; i < len; i++) {
	     int pos = i * 2;
	     result[i] = (byte) (toByte(achar[pos]) << 4 | toByte(achar[pos + 1]));
	    }
	    return result;
	}

	private static byte toByte(char c) {
	    byte b = (byte) "0123456789ABCDEF".indexOf(c);
	    return b;
	}
    
    public static void main(String[] args) throws Exception {
//    	String a
//    	String aa = BTest.encode(a);
//    	System.out.println(aa);
//    	System.out.println("=========================");
//		System.out.println(new String(BTest.decode(aa)));
    	
    	StringBuffer sb = new StringBuffer();
	   	 sb.append("RElDRUAAAAAIAAAATwMSMXsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEhTSFOMAAAAgAAAABqrslBhfjTIgRAhOQHaFZykARJofYMF82ceeIQ+r+pZ04OwiHnPEZgb5l1mWhNJTmi5PsSUlpqGIlwK");
	   	 sb.append("OGTEqerwRqOt9GmgHtwQvYdfZIbY6jfWIZ6Ub5jb8SnogPBNLjFxLUKYoE7u");
	   	 sb.append("21+4W2L6eH5IFEtacDRclnlwlue4/5HDVFJFQ4EHAAB1BwAAMIID+DCCAuCg");
		 sb.append("AwIBAgIBEDANBgkqhkiG9w0BAQUFADBiMQswCQYDVQQGEwJVUzETMBEGA1UE");
		 sb.append("ChMKQXBwbGUgSW5jLjEmMCQGA1UECxMdQXBwbGUgQ2VydGlmaWNhdGlvbiBB");
		 sb.append("dXRob3JpdHkxFjAUBgNVBAMTDUFwcGxlIFJvb3QgQ0EwHhcNMDcwMTA1MTky");
		 sb.append("MTU5WhcNMjIwMTA1MTkyMTU5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UEChMK");
		 sb.append("QXBwbGUgSW5jLjEmMCQGA1UECxMdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRo");
		 sb.append("b3JpdHkxMjAwBgNVBAMTKUFwcGxlIFNlY3VyZSBCb290IENlcnRpZmljYXRp");
		 sb.append("b24gQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA");
		 sb.append("/vLd2mU5sHLjA4SB9FbJ0aFKu8gEAfNGDZXhN5UKaUfGxIx5PkdVBrIGFOt+");
		 sb.append("pPUj/kI1mO80Bc6a062U0KIPwtK0BEhMI1pbxwudYtPz42sQ/pcIV8YSdncZ");
		 sb.append("ssbDLJjttymH5NwYtuXzuhP7sra3Z9nL32+lkz3tepNntP00FuQAqwu3Th9a");
		 sb.append("1gNoPnK2FDA6DGSXoEYieRt3LFsukOAR3Baj4cj3hLJP3Es6CtUSftwRP/oR");
		 sb.append("c2UaSXCgfnWCtDwrL1XfMIixdU1F3AcoLUo6hf2flT4iupxG97doe7OU1UI+");
		 sb.append("BbM4+Gd5SIxsH4u+7u1UBdWjC1h9eA8kqaHcCnTq9wIDAQABo4GcMIGZMA4G");
		 sb.append("A1UdDwEB/wQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRJPTZT");
		 sb.append("ydcV4YZhTqyrqxhWY13DxjAfBgNVHSMEGDAWgBQr0GlHlHYJ/vRrjS5ApvdH");
		 sb.append("TX8IXjA2BgNVHR8ELzAtMCugKaAnhiVodHRwOi8vd3d3LmFwcGxlLmNvbS9h");
		 sb.append("cHBsZWNhL3Jvb3QuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQA0xQzFDlkRL6bC");
		 sb.append("nzJ452QyadutwiXKt0eDt5I8cVOgsq0wlYBQvW1fTNzOeA1MSRBQOBA1v0WB");
		 sb.append("rGZYLCEj+JZegOnTxkz9ha45YfYoqkTtFZs/R8BXrGccjM3Uk41P22pUp3tC");
		 sb.append("Ww+Zxtc4q1KnoYMdhTB06g0d2miEj+KEfsu5QW7Vn6hCtf8ztnF/6qO53UkD");
		 sb.append("YIV2ED6OqOE24xLdhWztZlOwW0ibL3/2yhzwXZgtdK3wSEfF4ZpnsiIPsA4C");
		 sb.append("oOG6amK5tLVx9CXhs+Wg7cgaQLX4MRUFpFw4I0yQnUcDgIDUMpBFjw+vm/wC");
		 sb.append("7u3L5jH2nxXmfStXQw7iD6GgrYnaMIIDdTCCAl2gAwIBAgICAKowDQYJKoZI");
		 sb.append("hvcNAQEFBQAwfjELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkFwcGxlIEluYy4x");
		 sb.append("JjAkBgNVBAsTHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MTIwMAYD");
		 sb.append("VQQDEylBcHBsZSBTZWN1cmUgQm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0");
		 sb.append("eTAeFw0wOTAzMjUyMDUyNTNaFw0xOTAzMjYyMDUyNTNaMFUxCzAJBgNVBAYT");
		 sb.append("AlVTMRMwEQYDVQQKEwpBcHBsZSBJbmMuMQwwCgYDVQQLEwNFVFMxIzAhBgNV");
		 sb.append("BAMTGkgzUC1EYXJ3aW4tUHJvZC1EYXRhQ2VudGVyMIGfMA0GCSqGSIb3DQEB");
		 sb.append("AQUAA4GNADCBiQKBgQDi8sEDbmZ5Y0SE4R6B7ArxAF/o8+fTQaUBZHZ30CPI");
		 sb.append("l1DIilY23Z+XJ1WCYxH5SCoNa/zpLGclDyNdM6tiquPBRE1UnbXgK+CxF1/Z");
		 sb.append("WcQfO1ASvj/1aY4ZvzNbnt9evSw0u/QowTTCqGQvjYQ3/kmHehde3NfDsi9s");
		 sb.append("G5RgU4oCTwIDAQABo4GpMIGmMAsGA1UdDwQEAwIHgDAdBgNVHQ4EFgQUIaPA");
		 sb.append("u0kGM+nzfwZng/Vp3FKEn5swHwYDVR0jBBgwFoAUST02U8nXFeGGYU6sq6sY");
		 sb.append("VmNdw8YwVwYKKoZIhvdjZAYBAQEB/wRGBEQzZ21JRAAAADAAAAAAAAAAdHJl");
		 sb.append("Y01PRFMQAAAABAAAAAEAAABET1JQEAAAAAQAAAABAAAAUElIQxAAAAAEAAAA");
		 sb.append("MIkAADANBgkqhkiG9w0BAQUFAAOCAQEA9Pbp5zI/KegsecRTLZpJgo8yZGpR");
		 sb.append("ZMFMf/NFZetS5bLvf2WH+fGBEBGil7Uv24SYtVbkaZLm6t7zts6oeVJ6Rt5z");
		 sb.append("LfKpvwtvRpFiKMfjEhBzIU8WAOK0R+yM4/N2HXQs4br6SUpY3Q3fKMOS4MYQ");
		 sb.append("rO9dUYrF79mIWCqPATPIL1Sh3TJTI7zgdEsiyYM82t+ob2H2haC6UiB8QO5c");
		 sb.append("r8h9vjJOlyF47288Ii3tiFJonav4Y57oXbPQuJPboh2dxrXDNqvPTaTtFFm4");
		 sb.append("DpNg+qnBQNVQoq6uFno2xngyc1ZFrX8SW0yjMGf3vDdMMNDOkwyRHMNNJ+1f");
		 sb.append("9StCqH+DltAq1w==");
		 String a
		 String res = "";
		 res = BASE64.decodeToHex(sb.toString());
		 System.out.println(res);
		 if(a.equals(res.trim())){
			 System.out.println(true);
		 }else{
			 System.out.println(false);
		 }
		 
		 System.out.println("9FAF9D7B0F68A758213305396BCE9A6F1DA6E435".toLowerCase());
    }   
}
